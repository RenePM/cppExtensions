        /*
            Function used to log a msg to log file, this can be used when logging global or local code that does not exist
            in a class or function "file level code"
            INPUT:
                formattedMsg_: The message you want to log
                appName_     : App or Filename that log msg exists in

            OUTPUT:
                None

            RETURN:
                None
        */
        void logFileMessage(string formattedMsg_, string appName_ = "")
        {
            // Has app name been specified?
            if (appName_ != "")
            {
                //Y->Update last known app name
                myDeybugInfo.appName_ = appName_;
            }

            // Create msg senderId
            string senderId = myDeybugInfo.appName_;

            // Create formatted log message
            LPCSTR message;
            LPSTR logMessage;

            // Convert the string to a c string
            message = formattedMsg_.c_str();
           
            // Create the formatted log msg
            sprintf(logMessage, message);
           
            // Log the message to file
            logFile_ << senderId << ": " << logMessage;

            return;
        }

        /*
            Function used to log a more location specific msg to log file, this can be used when logging global or local code that does not exist
            in a class or function "file level code"
            INPUT:
                formattedMsg_: The message you want to log
                appName_     : App or Filename that log msg exists in

            OUTPUT:
                None

            RETURN:
                None
        */
        void logFileMessageEx(string formattedMsg_, string appName_ = "", string fileName_ = "", string objSeperator_ = "::")
        {
            // Has app name been specified?
            if (appName_ != "")
            {
                //Y->Update last known app name
                myDeybugInfo.appName_ = appName_;
            }

            // Has fileName been specified?
            if (fileName_ != "")
            {
                //Y->Update last known fileName
                myDeybugInfo.fileName_ = fileName_;
            }
            // Create msg senderId, appName::fileName
            string senderId = myDeybugInfo.appName_;
            senderId.append(objSeperator_);
            senderId.append(myDeybugInfo.fileName_);

            // Create formatted log message
            LPCSTR message;
            LPSTR logMessage;

            // Convert the string to a c string
            message = formattedMsg_.c_str();

            // Create the formatted log msg
            sprintf(logMessage, message);

            // Log the message to file
            logFile_ << senderId << ": " << logMessage;

            return;
        }

        /*
            Function used to log a msg with line num to log file, this can be used when logging global or local code that does not exist
            in a class or function
            INPUT:

            OUTPUT:

            RETURN:
        */
        void logFileMessageLineNum(string formattedMsg_, string appName_ = "", int lineNum_ = -1)
        {
            // Has app name been specified?
            if (appName_ != "")
            {
                //Y->Update last known app name
                myDeybugInfo.appName_ = appName_;
            }
            
            // Has lineNum been specified?
            if (lineNum_ > -1)
            {
                //Y-> Update last know line num
                myDeybugInfo.lineNum_ = lineNum_;
            }

            // Create msg senderId
            string senderId = "[";

            // Add line num
            senderId.append(to_string(myDeybugInfo.lineNum_));
            senderId.push_back(']');

            // Add app name
            senderId.append(myDeybugInfo.appName_);

            // Create formatted log message
            LPCSTR message;
            LPSTR logMessage;

            // Convert the string to a c string
            message = formattedMsg_.c_str();

            // Create the formatted log msg
            sprintf(logMessage, message);

            // Log the message to file
            logFile_ << senderId << ": " << logMessage;

            return;
        }

        /*
            Function used to log a more location specific msg with line num to log file, this can be used when logging global or local code that does not exist
            in a class or function
            INPUT:

            OUTPUT:

            RETURN:
        */
        void logFileMessageLineNumEx(string formattedMsg_, string appName_ = "", string fileName_ = "", int lineNum_ = -1, string objSeperator_ = "::")
        {
            // Has app name been specified?
            if (appName_ != "")
            {
                //Y->Update last known app name
                myDeybugInfo.appName_ = appName_;
            }

            // Has fileName been specified?
            if (fileName_ != "")
            {
                //Y->Update last known file name
                myDeybugInfo.fileName_ = fileName_;
            }

            // Has lineNum been specified?
            if (lineNum_ > -1)
            {
                //Y-> Update last know line num
                myDeybugInfo.lineNum_ = lineNum_;
            }

            // Create msg senderId, [lineNum]::appName::fileName
            string senderId = "[";
            senderId.append(to_string(myDeybugInfo.lineNum_));
            senderId.push_back(']');

            senderId.append(myDeybugInfo.appName_);
            senderId.append(objSeperator_);

            senderId.append(myDeybugInfo.fileName_);

            // Create formatted log message
            LPCSTR message;
            LPSTR logMessage;

            // Convert the string to a c string
            message = formattedMsg_.c_str();

            // Create the formatted log msg
            sprintf(logMessage, message);

            // Log the message to file
            logFile_ << senderId << ": " << logMessage;

            return;
        }



        /*
            Function used to log a classless function call process to log file
            INPUT:

            OUTPUT:

            RETURN:
        */
        void logFileFunction(string formattedMsg_, string appName_ = "", string functionName_ = "", string objSeperator_ = "::")
        {
            // Has app name been specified?
            if (appName_ != "")
            {
                //Y->Update last known app name
                myDeybugInfo.appName_ = appName_;
            }

            // Has function name been specified?
            if (functionName_ != "")
            {
                //Y-> Update last known function name 
                myDeybugInfo.functionName_ = functionName_;
            }

            // Create msg senderId, appName::functionName
            string senderId = myDeybugInfo.appName_;
            senderId.append(objSeperator_);            
            senderId.append(myDeybugInfo.functionName_);

            // Create formatted log message
            LPCSTR message;
            LPSTR logMessage;

            // Convert the log msg string to a c string
            message = formattedMsg_.c_str();

            // Create the formatted log msg
            sprintf(logMessage, message);

            // Log the message to file
            logFile_ << senderId << ": " << logMessage;

            return;
        }

        /*
            Function used to log a more location specific classless function call process to log file
            INPUT:

            OUTPUT:

            RETURN:
        */
        void logFileFunctionEx(string formattedMsg_, string appName_ = "", string fileName_ = "", string functionName_ = "", string objSeperator_ = "::")
        {
            // Has app name been specified?
            if (appName_ != "")
            {
                //Y->Update last known app name
                myDeybugInfo.appName_ = appName_;
            }

            // Has file name been specified?
            if (fileName_ != "")
            {
                //Y->Update last known file name
                myDeybugInfo.appName_ = fileName_;
            }

            // Has function name been specified?
            if (functionName_ != "")
            {
                //Y-> Update last known function name 
                myDeybugInfo.functionName_ = functionName_;
            }

            // Create msg senderId, appName::fileName::functionName
            string senderId = myDeybugInfo.appName_;
            senderId.append(objSeperator_);
            senderId.append(myDeybugInfo.fileName_);
            senderId.append(objSeperator_);
            senderId.append(myDeybugInfo.functionName_);

            // Create formatted log message
            LPCSTR message;
            LPSTR logMessage;

            // Convert the log msg string to a c string
            message = formattedMsg_.c_str();

            // Create the formatted log msg
            sprintf(logMessage, message);

            // Log the message to file
            logFile_ << senderId << ": " << logMessage;

            return;
        }

        /*
            Function used to log a classless function call process to log file with line num specified
            INPUT:

            OUTPUT:

            RETURN:
        */
        void logFileFunctionLineNum(string formattedMsg_, string appName_ = "", string functionName_ = "", int lineNum_ = 0, string objSeperator_ = "::")
        {
            // Has app name been specified?
            if (appName_ != "")
            {
                //Y->Update last known app name
                myDeybugInfo.appName_ = appName_;
            }

            // Has function name been specified?
            if (functionName_ != "")
            {
                //Y->Update last known function name
                myDeybugInfo.functionName_ = functionName_;
            }

            // Has lineNum been specified?
            if (lineNum_ > -1)
            {
                //Y-> Update last know line num
                myDeybugInfo.lineNum_ = lineNum_;
            }

            // Create msg senderId, [lineNum]appName::functionName
            string senderId = "[";
            senderId.append(to_string(myDeybugInfo.lineNum_));
            senderId.push_back(']');

            senderId.append(myDeybugInfo.appName_);
            senderId.append(objSeperator_);
            
            senderId.append(myDeybugInfo.functionName_);

            // Create formatted log message
            LPCSTR message;
            LPSTR logMessage;

            // Convert the string to a c string
            message = formattedMsg_.c_str();

            // Create the formatted log msg
            sprintf(logMessage, message);

            // Log the message to file
            logFile_ << senderId << ": " << logMessage;

            return;
        }

        /*
            Function used to log a more location specific classless function call process to log file with line num specified
            INPUT:

            OUTPUT:

            RETURN:
        */
        void logFileFunctionLineNumEx(string formattedMsg_, string appName_ = "", string fileName_ = "", string functionName_ = "", int lineNum_ = 0, string objSeperator_ = "::")
        {
            // Has app name been specified?
            if (appName_ != "")
            {
                //Y->Update last known app name
                myDeybugInfo.appName_ = appName_;
            }

            // Has file name been specified?
            if (fileName_ != "")
            {
                //Y->Update last known file name
                myDeybugInfo.fileName_ = fileName_;
            }

            // Has function name been specified?
            if (functionName_ != "")
            {
                //Y->Update last known function name
                myDeybugInfo.functionName_ = functionName_;
            }

            // Has lineNum been specified?
            if (lineNum_ > -1)
            {
                //Y-> Update last know line num
                myDeybugInfo.lineNum_ = lineNum_;
            }

            // Create msg senderId, [lineNum]appName::fileName::functionName w. def. obj seperator
            string senderId = "[";
            senderId.append(to_string(myDeybugInfo.lineNum_));
            senderId.push_back(']');

            senderId.append(myDeybugInfo.appName_);
            senderId.append(objSeperator_);

            senderId.append(myDeybugInfo.fileName_);
            senderId.append(objSeperator_);

            senderId.append(myDeybugInfo.functionName_);

            // Create formatted log message
            LPCSTR message;
            LPSTR logMessage;

            // Convert the string to a c string
            message = formattedMsg_.c_str();

            // Create the formatted log msg
            sprintf(logMessage, message);

            // Log the message to file
            logFile_ << senderId << ": " << logMessage;

            return;
        }
        
        
--------------------------------------------
----------------------------------------------
        /*
            Function used to log a msg regarding class, to log file, 
            this can be used when code that exists in a class but outside any functions.
            INPUT:

            OUTPUT:

            RETURN:
        */
        void logFileMessageClass(string formattedMsg_, string appName_ = "", string className_ = "", string objSeperator_ = "::")
        {
            // Has app name been specified?
            if (appName_ != "")
            {
                //Y->Update last known app name
                myDeybugInfo.appName_ = appName_;
            }

            // Has class name been specified?
            if (className_ != "")
            {
                //Y-> Update last know class Name
                myDeybugInfo.className_ = className_;
            }

            // Create msg senderId, appName::className
            string senderId = myDeybugInfo.appName_;
            senderId.append(objSeperator_);
            senderId.append(myDeybugInfo.className_);

            // Create formatted log message
            LPCSTR message;
            LPSTR logMessage;

            // Convert the string to a c string
            message = formattedMsg_.c_str();

            // Create the formatted log msg
            sprintf(logMessage, message);

            // Log the message to file
            logFile_ << senderId << ": " << logMessage;

            return;
        }

        /*
            Function used to log a detailed msg regarding class, to log file,
            this can be used when code that exists in a class but outside any functions.
            INPUT:

            OUTPUT:

            RETURN:
        */
        void logFileMessageDetailed(string formattedMsg_, string appName_ = "", string fileName_ = "", string className_ = "", string objSeperator_ = "::")
        {
            // Has app name been specified?
            if (appName_ != "")
            {
                //Y->Update last known app name
                myDeybugInfo.appName_ = appName_;
            }

            // Has filename been specifed?
            if (fileName_ != "")
            {
                //Y->Update last known file name
                myDeybugInfo.fileName_ = fileName_;
            }

            // Has class name been specified?
            if (className_ != "")
            {
                //Y-> Update last know class Name
                myDeybugInfo.className_ = className_;
            }

            // Create msg senderId, appName::fileName::className
            string senderId = myDeybugInfo.appName_;
            senderId.append(objSeperator_);
            senderId.append(myDeybugInfo.fileName_);
            senderId.append(objSeperator_);
            senderId.append(myDeybugInfo.className_);

            // Create formatted log message
            LPCSTR message;
            LPSTR logMessage;

            // Convert the string to a c string
            message = formattedMsg_.c_str();

            // Create the formatted log msg
            sprintf(logMessage, message);

            // Log the message to file
            logFile_ << senderId << ": " << logMessage;

            return;
        }


        /*
            Function used to log a msg with line num, regarding a class, to log file, 
            this can be used when code that exists in a class but outside any functions.
            INPUT:

            OUTPUT:

            RETURN:
        */
        void logFileMessageLineNum(string formattedMsg_, string appName_ = "", string className_ = "", int lineNum_ = 0, string objSeperator_ = "::")
        {
            // Has app name been specified?
            if (appName_ != "")
            {
                //Y->Update last known app name
                myDeybugInfo.appName_ = appName_;
            }

            // Has class name been specified?
            if (className_ != "")
            {
                //Y->Update last known function name
                myDeybugInfo.className_ = className_;
            }

            // Has lineNum been specified?
            if (lineNum_ > -1)
            {
                //Y-> Update last know line num
                myDeybugInfo.lineNum_ = lineNum_;
            }

            // Create msg senderId, [lineNum]appName::className
            string senderId = "[";
            senderId.append(to_string(myDeybugInfo.lineNum_));
            senderId.push_back(']');

            senderId.append(myDeybugInfo.appName_);
            senderId.append(objSeperator_);

            senderId.append(myDeybugInfo.className_);

            // Create formatted log message
            LPCSTR message;
            LPSTR logMessage;

            // Convert the string to a c string
            message = formattedMsg_.c_str();

            // Create the formatted log msg
            sprintf(logMessage, message);

            // Log the message to file
            logFile_ << senderId << ": " << logMessage;

            return;
        }

        
        
        void logFileMessageLineNum(string formattedMsg_, string appName_ = "", string className_ = "", int lineNum_ = 0, string objSeperator_ = "::")
        {
            // Has app name been specified?
            if (appName_ != "")
            {
                //Y->Update last known app name
                myDeybugInfo.appName_ = appName_;
            }

            // Has class name been specified?
            if (className_ != "")
            {
                //Y->Update last known function name
                myDeybugInfo.className_ = className_;
            }

            // Has lineNum been specified?
            if (lineNum_ > -1)
            {
                //Y-> Update last know line num
                myDeybugInfo.lineNum_ = lineNum_;
            }

            // Create msg senderId, [lineNum]appName::className
            string senderId = "[";
            senderId.append(to_string(myDeybugInfo.lineNum_));
            senderId.push_back(']');

            senderId.append(myDeybugInfo.appName_);
            senderId.append(objSeperator_);

            senderId.append(myDeybugInfo.className_);

            // Create formatted log message
            LPCSTR message;
            LPSTR logMessage;

            // Convert the string to a c string
            message = formattedMsg_.c_str();

            // Create the formatted log msg
            sprintf(logMessage, message);

            // Log the message to file
            logFile_ << senderId << ": " << logMessage;

            return;
        }

        /*
            Function used to log a class::function call process to log file
            INPUT:

            OUTPUT:

            RETURN:
        */
        void logFileClassFunction(string formattedMsg_, string appName_ = "", string className_ = "", string functionName_ = "", string objSeperator_ = "::")
        {
            // Has app name been specified?
            if (appName_ != "")
            {
                //Y->Update last known app name
                myDeybugInfo.appName_ = appName_;
            }

            // Has class name been specified?
            if (className_ != "")
            {
                //Y->Upadte last known class name
                myDeybugInfo.className_ = className_;
            }

            // Has function name been specified?
            if (functionName_ != "")
            {
                //Y-> Update last know function name
                myDeybugInfo.functionName_ = functionName_;
            }

            // Create msg senderId, appName::className::functionName
            string senderId = myDeybugInfo.appName_;
            senderId.append(objSeperator_);

            senderId.append(myDeybugInfo.className_);
            senderId.append(objSeperator_);

            senderId.append(myDeybugInfo.functionName_);

            // Create formatted log message
            LPCSTR message;
            LPSTR logMessage;

            // Convert the log msg string to a c string
            message = formattedMsg_.c_str();

            // Create the formatted log msg
            sprintf(logMessage, message);

            // Log the message to file
            logFile_ << senderId << ": " << logMessage;

            return;
        }

        /*
            Function used to log function call process with line number to log file
            INPUT:

            OUTPUT:

            RETURN:
        */
        void logFileClassFunctionLineNum(string formattedMsg_, string appName_ = "", string className_ = "", string functionName_ = "", int lineNum_ = 0, string objSeperator_ = "::")
        {

        }
